#!/usr/local/env python3
from pytpc.gases import InterpolatedGas
from pytpc.utilities import read_lookup_table, find_exclusion_region
from pytpc.constants import degrees
from effsim import EfficiencySimulator, count_finished_events, initialize_database
from effsim.paramgen import uniform_param_generator, distribution_param_generator, parse_dsigmaiv_output
import numpy as np
import yaml
import csv
import argparse
import os
from sqlalchemy import create_engine
import logging
import logging.config


logger = logging.getLogger(__name__)


def parse_arguments():
    parser = argparse.ArgumentParser(description='A program to check the efficiency of the linear and MC fits')
    parser.add_argument('--num_pts', '-n', help='Number of points to simulate. If uniform dist, num per dimension', type=int)
    parser.add_argument('--xcfg-path', '-x', help='Path to GET config file, for exlusion region')
    parser.add_argument('--evtgen-config-patch', '-e', help='A special patch for the evtgen config')
    parser.add_argument('--config-patch', '-p', help='One or more YAML files to patch the config with', action='append')
    parser.add_argument('--distrib-info', '-d', help='YAML file giving info about distribution to use')
    parser.add_argument('--corrupt-cobo-clocks', '-c', help='Apply offsets to CoBo clocks', action='store_true')
    parser.add_argument('config', help='Path to config file')
    parser.add_argument('output', help='Path to output database')
    return parser.parse_args()


def setup_logging(config):
    try:
        log_conf = config['logging_config']
        logging.config.dictConfig(log_conf)
    except KeyError:
        logger.warning('No logging config found. Info messages may be suppressed.')


def load_config_file(path, patches=None, evtgen_patch=None):
    with open(path, 'r') as f:
        config = yaml.load(f)

    setup_logging(config)

    logger.info('Read config file %s', os.path.basename(path))

    if config['micromegas_tb'] != 0:
        logger.warning('Micromegas TB was nonzero in config. Setting value to zero.')
        config['micromegas_tb'] = 0

    if patches is not None:
        for patch_path in patches:
            with open(patch_path, 'r') as f:
                patch = yaml.load(f)
            config.update(patch)
            logger.info('Applied config patch %s', os.path.basename(patch_path))

    evtgen_config = config.copy()

    if evtgen_patch is not None:
        with open(evtgen_patch, 'r') as f:
            evtgen_config_patch = yaml.load(f)
        evtgen_config.update(evtgen_config_patch)
        logger.info('Patched config for event generator using %s', os.path.basename(evtgen_patch))

    return config, evtgen_config


def get_distribution(distconfig_path, proj_charge=None, beam_charge=None):
    distconfig_path = os.path.abspath(os.path.expanduser(distconfig_path))
    with open(distconfig_path, 'r') as f:
        distconfig = yaml.load(f)

    try:
        dist_file = os.path.abspath(os.path.expanduser(distconfig['dist_path']))
        ratio_to_rutherford = distconfig['ratio_to_rutherford']
        en_min, en_max = distconfig['en_min'], distconfig['en_max']
        logger.info('Energy domain: (%0.4f, %0.4f) MeV in CM', en_min, en_max)
        ang_min, ang_max = distconfig['ang_min'] * degrees, distconfig['ang_max'] * degrees
        logger.info('Angular domain: (%0.4f, %0.4f) deg in CM', ang_min / degrees, ang_max / degrees)

    except KeyError as err:
        raise KeyError('A required key was missing from the distribution info file.') from err

    ens, angs, xsecs = parse_dsigmaiv_output(
        input_path=dist_file,
        ratio_to_rutherford=ratio_to_rutherford,
        Z1=proj_charge,
        Z2=beam_charge,
    )

    return ens, angs, xsecs, (en_min, en_max), (ang_min, ang_max)


def load_pedestals(path):
    with open(path, 'r') as f:
        reader = csv.reader(f)
        pedestals = np.zeros(10240, dtype='float64')
        for row in reader:
            pad, ped = row
            pedestals[int(pad)] = float(ped)

    return pedestals


def make_param_generator(beam_enu0, beam_mass, beam_chg, proj_mass, proj_chg, max_beam_angle, beam_origin_z,
                         gas, num_evts, dist_info=None):
    if dist_info is not None:
        raise NotImplementedError('This needs to be updated to work with beam dispersion')
        # logger.info('Reading distribution from DSIGMAIV output')
        # ens, angs, xsecs, en_bounds, ang_bounds = get_distribution(dist_info, proj_chg, beam_chg)
        # return distribution_param_generator(
        #     ens=ens,
        #     angs=angs,
        #     xsecs=xsecs,
        #     beam_enu0=beam_enu0,
        #     beam_mass=beam_mass,
        #     beam_chg=beam_chg,
        #     proj_mass=proj_mass,
        #     gas=gas,
        #     num_evts=num_evts,
        #     en_bounds=en_bounds,
        #     ang_bounds=ang_bounds,
        # )

    else:
        return uniform_param_generator(
            beam_enu0=beam_enu0,
            beam_mass=beam_mass,
            beam_chg=beam_chg,
            proj_mass=proj_mass,
            max_beam_angle=max_beam_angle,
            beam_origin_z=beam_origin_z,
            gas=gas,
            num_evts=num_evts,
        )


def main():
    args = parse_arguments()

    config, evtgen_config = load_config_file(args.config, args.config_patch, args.evtgen_config_patch)

    gas = InterpolatedGas(config['gas_name'], config['gas_pressure'])

    num_pts = args.num_pts or config['dist_num_pts']

    if args.xcfg_path is not None:
        logger.info('Reading exclusion regions from %s', os.path.basename(args.xcfg_path))
        lookup = read_lookup_table(config['padmap_path'])
        excluded_pads, lowgain_pads = find_exclusion_region(args.xcfg_path, lookup)
    else:
        excluded_pads = []
        lowgain_pads = []

    pedestals = load_pedestals(config['pedestals_path'])

    effsim = EfficiencySimulator(
        config=config,
        excluded_pads=excluded_pads,
        lowgain_pads=lowgain_pads,
        evtgen_config=evtgen_config,
        pedestals=pedestals,
        corrupt_cobo_clocks=args.corrupt_cobo_clocks,
    )

    sql_engine = create_engine('sqlite:///{}'.format(args.output))
    initialize_database(sql_engine)

    param_gen = make_param_generator(
        beam_enu0=evtgen_config['beam_enu0'],
        beam_mass=evtgen_config['beam_mass'],
        beam_chg=evtgen_config['beam_charge'],
        proj_mass=evtgen_config['mass_num'],
        proj_chg=evtgen_config['charge_num'],
        max_beam_angle=evtgen_config['max_beam_angle'] * degrees,
        beam_origin_z=evtgen_config['beam_origin_z'],
        gas=gas,
        num_evts=num_pts,
        dist_info=args.distrib_info,
    )

    num_finished = count_finished_events()
    if num_finished >= num_pts:
        logger.info('Already finished all requested events.')
        return
    elif num_finished > 0:
        logger.info('Already finished %d events. Resuming from where we left off.', num_finished)
        num_pts -= num_finished

    for evt_id, (param_vector, beam_vector) in enumerate(param_gen):
        evt_id += num_finished

        if evt_id % 100 == 0:
            logger.info('Progress: at event %d / %d', evt_id, num_pts)

        try:
            effsim.process_event(evt_id, param_vector, beam_vector)
        except Exception:
            logger.exception('Event %d failed', evt_id)


if __name__ == '__main__':
    import signal
    import sys

    def handle_signal(signum, stack_frame):
        logger.critical('Received signal %d. Quitting.', signum)
        sys.stdout.flush()
        sys.exit(1)

    signal.signal(signal.SIGTERM, handle_signal)
    signal.signal(signal.SIGQUIT, handle_signal)

    main()
