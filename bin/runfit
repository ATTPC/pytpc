#!/usr/bin/env python3
"""The main executable script for fitting events.

This script can be used to run the Monte Carlo fitter on a data file. It will write output to a SQLite database.
For information about the command options, try::

    runfit -h

in a terminal, or take a look at the function `parse_args`.

"""

import pandas as pd
import sys
import os
import argparse
import h5py
from pytpc.fitting import MCFitter, BadEventError
from pytpc.utilities import find_run_number
from pytpc.cleaning import apply_clean_cut
import yaml
import logging
import logging.config

from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, Float, create_engine
from sqlalchemy.sql import func
from contextlib import contextmanager

logger = logging.getLogger(__name__)


# Database setup

SQLBase = declarative_base()
Session = sessionmaker()


@contextmanager
def managed_session():
    """A context manager that initiates DB sessions and either commits or rolls them back.

    This manager is used to safely and conveniently access the database. Create a database session with

        with managed_session() as session:
            # do something

    and it will handle committing the data to the database for you. You can add things to the session with
    ``session.add()`` as usual. If an exception is raised inside the ``with`` block, the session will be rolled back
    and the exception will be re-raised. If the block exits normally, the session is committed. Either way, it's closed
    when the block exits.

    """
    session = Session()
    try:
        yield session
        session.commit()
    except:
        session.rollback()
        raise
    finally:
        session.close()


class MinimizerResult(SQLBase):
    """The database table for storing fit results.

    To add a result to the database, do this::

        with managed_session() as session:
            # Assume we have a result called fitres
            db_entry = MinimizerResult(evt_id=evt_id, **fitres)
            session.add(db_entry)

    This works because the fitter returns a dictionary with keys that match the columns of the table. If there is an
    extra key in the dictionary, this will fail with an error about unknown keyword arguments, so make sure they match!

    """
    __tablename__ = 'mcmin_results'
    evt_id = Column(Integer, primary_key=True)
    x0 = Column(Float)
    y0 = Column(Float)
    z0 = Column(Float)
    enu0 = Column(Float)
    azi0 = Column(Float)
    pol0 = Column(Float)
    posChi2 = Column(Float)
    enChi2 = Column(Float)
    vertChi2 = Column(Float)
    lin_scat_ang = Column(Float)
    lin_beam_int = Column(Float)
    lin_chi2 = Column(Float)
    rad_curv = Column(Float)
    brho = Column(Float)
    curv_en = Column(Float)
    curv_ctr_x = Column(Float)
    curv_ctr_y = Column(Float)


def find_last_completed_event():
    """Look up the event ID of the last event in the output database.

    Returns
    -------
    int
        The last event ID. If the database is empty, 0 is returned.

    """
    with managed_session() as session:
        query = session.query(func.max(MinimizerResult.evt_id).label('last_evtid'))
        res = query.one()
        last_evtid = res.last_evtid
        if last_evtid is None:
            return 0
        else:
            return last_evtid


def create_and_setup_database_engine(path):
    """Create the output database and initialize it.

    Parameters
    ----------
    path : string
        The path where the SQLite database should be created. If it already exists, new results will be added to it.

    Returns
    -------
    engine : sqlalchemy.engine.Engine
        The database engine. You probably won't need to use it directly.

    """
    engine = create_engine('sqlite:///{}'.format(path))
    SQLBase.metadata.create_all(bind=engine)
    Session.configure(bind=engine)
    return engine


@contextmanager
def monitored_execution(procedure_name, evt_id):
    """Basically a fancy try/except block.

    This context manager just monitors the block inside the ``with`` statement for exceptions and filters them. If
    the exception is a `BadEventError`, it passes it along unchanged, but other exceptions are wrapped with a
    `RuntimeError` that contains the event ID and the name of the procedure that failed. The main reason this exists
    is to avoid repeating the same try/except block over and over.

    Parameters
    ----------
    procedure_name : string
        A string that will be included in the message attached to the RuntimeError that will be raised in the event
        of an exception. Examples might include "Fitting", or "Cleaning".
    evt_id : int
        The event ID.

    """
    try:
        yield
    except BadEventError:
        raise
    except Exception as err:
        raise RuntimeError('{:s} failed for event {:d}'.format(procedure_name, evt_id)) from err


class FitManager(object):
    """A convenience class to handle all aspects of reading, cleaning, and fitting data.

    This is just a wrapper class that holds onto the input and output files and manages the database connection.
    It also offers an iterator that loops over all event IDs that need to be processed.

    Parameters
    ----------
    config : dict-like
        The config dictionary.
    evtlist_path, input_path, output_path : string
        Paths to the list of good events, input data file, and output database, respectively.

    Methods
    -------
    evtid_iterator()
        Returns an iterator that loops over the event IDs that need to be processed.
    process_event(evt_id)
        Reads the event, cleans it, fits it, and writes the output to the database.

    """
    def __init__(self, config, evtlist_path, input_path, output_path):
        self.fitter = MCFitter(config)
        self.run_num = find_run_number(input_path)
        self.input_file = h5py.File(input_path, 'r')
        self.db_engine = create_and_setup_database_engine(output_path)

        good_evts = pd.read_hdf(evtlist_path, 'evt_list')
        run_mask = good_evts.run_num == self.run_num
        nevts = len(good_evts[run_mask])
        logger.info('Loaded VME results. VME had %d valid events in this run.', nevts)

        last_evtid = find_last_completed_event()
        if last_evtid > 0:
            logger.info('Already finished up to event %d. Starting from where we left off.', last_evtid)
        evtid_mask = good_evts.evt_id > last_evtid

        self.evt_ids_to_process = good_evts[run_mask & evtid_mask].evt_id.values

    def evtid_iterator(self):
        """Iterates over all event IDs to be processed.

        A progress message is logged every 100 events.

        Yields
        ------
        evt_id : int
            The next event ID.

        """
        nevts = len(self.evt_ids_to_process)
        for i, evt_id in enumerate(self.evt_ids_to_process):
            if i % 100 == 0:
                logger.info('Finished %d / %d events', i, nevts)
            yield int(evt_id)

    def read_data(self, evt_id):
        """Reads the given event from the input file.

        Parameters
        ----------
        evt_id : int
            The event ID to read.

        Returns
        -------
        data : ndarray
            The data from the file.
        (cx, cy) : (float, float)
            The center of curvature of the track.
        """
        dataset = self.input_file['/clean/{}'.format(evt_id)]
        data = dataset[:]
        cx, cy = dataset.attrs['center'][:2]
        return data, (cx, cy)

    def clean_data(self, data):
        """Apply the cleaning cut to the data.

        Parameters
        ----------
        data : array-like
            The data to clean.

        Returns
        -------
        cleaned : ndarray
            The subset of ``data`` that passes the cleaning cuts.

        Raises
        ------
        BadEventError
            If there are fewer than 50 points remaining after the cut.

        """
        cleaned = apply_clean_cut(data)
        if len(cleaned) < 50:
            raise BadEventError('Too few points after cleaning')
        else:
            return cleaned

    def process_event(self, evt_id):
        """Run the whole fitting process on the given event.

        This does everything: it reads the event, cleans it, fits it, and writes the results to the database.

        Parameters
        ----------
        evt_id : int
            The ID of the event to read and process.

        """
        with monitored_execution('Reading', evt_id):
            raw_xyz, (cx, cy) = self.read_data(evt_id)

        with monitored_execution('Cleaning', evt_id):
            clean_xyz = self.clean_data(raw_xyz)

        with monitored_execution('Preprocessing', evt_id):
            xyz, (cu, cv) = self.fitter.preprocess(clean_xyz, center=(cx, cy), rotate_pads=False)

        with monitored_execution('Fitting', evt_id):
            fitres = self.fitter.process_event(xyz, cu, cv)

        # Write the results to the database
        with managed_session() as session:
            dbfitres = MinimizerResult(evt_id=evt_id, **fitres)
            session.add(dbfitres)


def parse_args():
    """Parses the command-line argument list and returns the values."""
    parser = argparse.ArgumentParser(description='Fit data using Monte Carlo optimization')
    parser.add_argument('--config', '-c', help='Path to config file, in YAML format', required=True)
    parser.add_argument('--config-patch', '-p', help='Configuration patches', action='append')
    parser.add_argument('--evtlist', '-e', help='Path to HDF5 file with results from the circle fit', required=True)
    parser.add_argument('--verbose', '-v', action='count', default=0,
                        help='Print more information')
    parser.add_argument('input_file', help='The input HDF5 file containing the peaks')
    parser.add_argument('db_path', help='Path to the output database file')
    args = parser.parse_args()

    if args.verbose >= 1:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    return args


def setup_logging(config):
    """Configure the logging library from the given dictionary.

    The dictionary must have a key "logging_config" that contains a valid configuration for the logging library.

    """
    try:
        log_conf = config['logging_config']
        logging.config.dictConfig(log_conf)
    except KeyError:
        logger.warning('No logging config found. Info messages may be suppressed.')


def main():
    args = parse_args()

    with open(os.path.abspath(args.config)) as f:
        config = yaml.load(f)

    setup_logging(config)

    if args.config_patch is not None:
        for path in args.config_patch:
            full_path = os.path.abspath(path)
            with open(full_path, 'r') as f:
                patch = yaml.load(f)
            config.update(patch)
            logger.info('Patched config with %s', os.path.basename(path))

    fit_manager = FitManager(
        config=config,
        evtlist_path=args.evtlist,
        input_path=args.input_file,
        output_path=args.db_path,
    )

    for evt_id in fit_manager.evtid_iterator():
        try:
            fit_manager.process_event(evt_id)
        except BadEventError as err:
            logger.warning('Event %d was bad: %s', evt_id, err)
        except Exception:
            logger.exception('Event %d failed', evt_id)


if __name__ == '__main__':
    import signal

    def handle_signal(signum, stack_frame):
        logger.critical('Received signal %d. Quitting.', signum)
        sys.stdout.flush()
        sys.exit(1)

    signal.signal(signal.SIGTERM, handle_signal)
    signal.signal(signal.SIGQUIT, handle_signal)

    main()
