"""build_gasdb.py

This script builds the gas database from the raw data files found in the path specified below.

The following paths are used in this script:

    GAS_RAW_DATA_ROOT: The directory that contains the raw data files and the gas list.
    GAS_LIST_PATH: The path to the gas list file.
    GAS_DB_PATH: The path to the gas database.
    
If these files are rearranged, the variables will need to be changed.

This script works by reading the gas list named in GAS_LIST_PATH to get information about each gas.
The gas list should be formatted as a YAML file. Each gas will get an entry that looks like this:

    isobutane:     # A name to identify the gas. Must be unique.
      mass: 58.12         # Molar mass of the gas in g/mol
      particles:          # The list of projectiles defined for this gas
        - mass: 4                    # Projectile mass
          charge: 2                  # Projectile charge
          file: srim-he4-butane.txt  # Path to file containing the data
          source: srim               # Source of the data. Must correspond to a known parser.
        - mass: 40
          charge: 18
          file: srim-ar40-butane.txt
          source: srim
    
Additional particles can be added by continuing the list with more entries. When the script is run,
it parses this file and reads the data file for each gas. Then it creates a table in the database
for each gas and fills it with the energy loss data. Finally, a row is added to a table of masses
to store the molar mass of the gas.

"""

import yaml
import os
from sqlalchemy import Table, MetaData, Column, Integer, Float, String, create_engine

GAS_RAW_DATA_ROOT = os.path.join('pytpc', 'data', 'raw')
GAS_LIST_PATH = os.path.join(GAS_RAW_DATA_ROOT, 'gas_list.yml')
GAS_DB_PATH = os.path.join('pytpc', 'data', 'gases', 'gasdata.db')


def read_srim(fp):
    """Reads data generated by SRIM from the file at the given path."""
    en_units = {'eV': 1e-6, 'keV': 1e-3, 'MeV': 1, 'GeV': 1e3}
    dist_units = {'um': 1e-4, 'mm': 1e-1, 'cm': 1, 'm': 1e2}

    res = []

    with open(fp) as f:
        for line in f:
            if 'Density' in line:
                litems = line.strip().split()
                gas_dens = float(litems[3])
                assert litems[4] == 'g/cm3', 'Units for density are not g/cm3: {}'.format(litems[4])
            if 'Straggling' in line:
                f.readline()
                break
        for line in f:
            if '-------' in line:
                break
            litems = line.strip().split()
            if len(litems) != 10:
                raise ValueError('Wrong number of entries in line!')

            en = float(litems[0]) * en_units[litems[1]]
            dedx_elec = float(litems[2]) * 1000  # convert MeV/(mg/cm^2) to MeV/(g/cm^2)
            dedx_nuc = float(litems[3]) * 1000
            proj_range = float(litems[4]) * dist_units[litems[5]] * gas_dens

            res.append({'energy': en, 'dedx': dedx_elec + dedx_nuc, 'range': proj_range})

    return res


def read_astar(fp):
    """Reads data from the ASTAR database from the file at the given path."""
    result = []
    with open(fp, 'r') as f:
        # Skip the header
        for i in range(7):
            f.readline()

        for line in f:
            energy, dedx, range_ = (float(x) for x in line.strip().split(' '))
            result.append({'energy': energy, 'dedx': dedx, 'range': range_})

    return result


def read_file(path, source):
    """Read a gas data file.
    
    Parameters
    ----------
    path : str
        Path to the file.
    source : str
        The data source. Must correspond to a parser known to this program.

    Returns
    -------
    data : List[Dict[str, float]]
        The data read from the file. It will be a list of dictionaries, with each dictionary
        corresponding to a row from the file. The dictionaries should have keys 'energy', 'dedx',
        and 'range'.

    """
    if source == 'srim':
        return read_srim(path)
    elif source == 'astar':
        return read_astar(path)
    else:
        raise ValueError('Unknown data source {}'.format(source))


def load_gas_list(path):
    """Read the gas list from the given path."""
    with open(path, 'r') as f:
        return yaml.load(f)


def build():
    """Build the gas database from the gas list."""
    try:
        os.remove(GAS_DB_PATH)
    except FileNotFoundError:
        pass

    engine = create_engine('sqlite:///{}'.format(GAS_DB_PATH))
    gas_list = load_gas_list(GAS_LIST_PATH)
    meta = MetaData(engine)

    # Build mass table
    mass_table = Table(
        'masses', meta,
        Column('name', String, primary_key=True),
        Column('mass', Float),
    )
    mass_table.create()

    for gas_name, gas_props in gas_list.items():
        gas_table = Table(
            gas_name, meta,
            Column('energy', Float),
            Column('dedx', Float),
            Column('range', Float),
            Column('proj_mass', Integer),
            Column('proj_charge', Integer),
        )
        gas_table.create()

        mass_ins = mass_table.insert().values(name=gas_name, mass=float(gas_props['mass']))
        with engine.begin() as conn:
            conn.execute(mass_ins)

        for particle in gas_props['particles']:
            data = read_file(
                path=os.path.join(GAS_RAW_DATA_ROOT, particle['file']),
                source=particle['source']
            )
            data_ins = gas_table.insert().values(
                proj_mass=int(particle['mass']),
                proj_charge=int(particle['charge'])
            )

            with engine.begin() as conn:
                conn.execute(data_ins, data)


if __name__ == '__main__':
    build()
